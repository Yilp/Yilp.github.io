<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yilp的博客</title>
  
  <subtitle>记录生活中的点点滴滴</subtitle>
  <link href="https://yilp.github.io/atom.xml" rel="self"/>
  
  <link href="https://yilp.github.io/"/>
  <updated>2022-08-11T08:42:12.499Z</updated>
  <id>https://yilp.github.io/</id>
  
  <author>
    <name>Yilp</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python语法记录</title>
    <link href="https://yilp.github.io/2022/08/11/python%E8%AF%AD%E6%B3%95%E8%AE%B0%E5%BD%95/"/>
    <id>https://yilp.github.io/2022/08/11/python%E8%AF%AD%E6%B3%95%E8%AE%B0%E5%BD%95/</id>
    <published>2022-08-11T06:35:16.000Z</published>
    <updated>2022-08-11T08:42:12.499Z</updated>
    
    <content type="html"><![CDATA[<p>记录python不熟悉的语法</p><span id="more"></span><h1 id="if-name-‘-main-‘："><a href="#if-name-‘-main-‘：" class="headerlink" title="if name == ‘__main__‘："></a>if <strong>name</strong> == ‘__main__‘：</h1><p>一个Python文件有两种运行方式，1个是作为脚本直接运行，另一个是作为模块import，而if <strong>name</strong> == ‘__main__‘ 里的代码只有在第1个的情况下才会运行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;one&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == ‘__main__‘:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;two&quot;</span>)</span><br><span class="line"><span class="comment"># 结果如下</span></span><br><span class="line"><span class="comment"># one</span></span><br><span class="line"><span class="comment"># two</span></span><br></pre></td></tr></table></figure><p>原理是作为模块导入时，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__name__ <span class="comment"># 指模块的名称</span></span><br><span class="line">__main__ <span class="comment"># 永远指当前运行的脚本</span></span><br><span class="line">__name__ ！= ‘__main__‘ </span><br></pre></td></tr></table></figure><h2 id="time-clock-，代码提示有该属性，但就是报错"><a href="#time-clock-，代码提示有该属性，但就是报错" class="headerlink" title="time.clock()，代码提示有该属性，但就是报错"></a>time.clock()，代码提示有该属性，但就是报错</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.perf_counter() <span class="comment">#替换即可计时</span></span><br></pre></td></tr></table></figure><h2 id="if-isinstance-X-list"><a href="#if-isinstance-X-list" class="headerlink" title="if isinstance(X, list):"></a>if isinstance(X, list):</h2><p>判断变量类型的函数，既可以是python内置的数据类型如 <strong>list、dict、str</strong>，也可以是自定义的类。</p><h2 id="numel"><a href="#numel" class="headerlink" title="numel()"></a>numel()</h2><p>返回数组中元素的个数</p><h2 id="apply-model-apply-fn-或net-apply-fn"><a href="#apply-model-apply-fn-或net-apply-fn" class="headerlink" title="apply(), model.apply(fn)或net.apply(fn)"></a>apply(), model.apply(fn)或net.apply(fn)</h2><p>任何网络都是 torch.nn.Module 的子类，都算Module。</p><p>apply会递归的应用fn到每个子模块，然后是应用到模块本身（即先子后父），返回的是Module</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="meta">@torch.no_grad()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init_weights</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="built_in">print</span>(m)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(m) == nn.Linear:</span><br><span class="line">        m.weight.fill_(<span class="number">1.0</span>)</span><br><span class="line">        <span class="built_in">print</span>(m.weight)</span><br><span class="line">net = nn.Sequential(nn.Linear(<span class="number">2</span>,<span class="number">4</span>), nn.Linear(<span class="number">4</span>, <span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span>(net)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;isinstance torch.nn.Module&#x27;</span>,<span class="built_in">isinstance</span>(net,torch.nn.Module))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">net.apply(init_weights)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Sequential(</span><br><span class="line">  (<span class="number">0</span>): Linear(in_features=<span class="number">2</span>, out_features=<span class="number">4</span>, bias=<span class="literal">True</span>)</span><br><span class="line">  (<span class="number">1</span>): Linear(in_features=<span class="number">4</span>, out_features=<span class="number">8</span>, bias=<span class="literal">True</span>)</span><br><span class="line">)</span><br><span class="line"><span class="built_in">isinstance</span> torch.nn.Module <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">Linear(in_features=<span class="number">2</span>, out_features=<span class="number">4</span>, bias=<span class="literal">True</span>)</span><br><span class="line">Parameter containing:</span><br><span class="line">tensor([[<span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>]], requires_grad=<span class="literal">True</span>)</span><br><span class="line">Linear(in_features=<span class="number">4</span>, out_features=<span class="number">8</span>, bias=<span class="literal">True</span>)</span><br><span class="line">Parameter containing:</span><br><span class="line">tensor([[<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">        [<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>]], requires_grad=<span class="literal">True</span>)</span><br><span class="line">Sequential(</span><br><span class="line">  (<span class="number">0</span>): Linear(in_features=<span class="number">2</span>, out_features=<span class="number">4</span>, bias=<span class="literal">True</span>)</span><br><span class="line">  (<span class="number">1</span>): Linear(in_features=<span class="number">4</span>, out_features=<span class="number">8</span>, bias=<span class="literal">True</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="函数和函数调用的区别"><a href="#函数和函数调用的区别" class="headerlink" title="函数和函数调用的区别"></a>函数和函数调用的区别</h2><p>f 是一个函数，它的值是函数本身， f( )是函数的调用，它的值是函数的执行结果</p><p>在被装饰函数定义阶段，也就是函数调用之前：</p><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>python装饰器就是用于拓展原来函数功能的一种函数，这个函数的特殊之处在于它的返回值也是一个函数，使用python装饰器的好处就是在不用更改原函数的代码前提下给函数增加新的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dec1</span>(<span class="params">func</span>):  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1111&quot;</span>)  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">one</span>():  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;2222&quot;</span>)  </span><br><span class="line">        func()  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;3333&quot;</span>)  </span><br><span class="line">    <span class="keyword">return</span> one  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec2</span>(<span class="params">func</span>):  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;aaaa&quot;</span>)  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">two</span>():  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;bbbb&quot;</span>)  </span><br><span class="line">        func()  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;cccc&quot;</span>)  </span><br><span class="line">    <span class="keyword">return</span> two  </span><br><span class="line"> </span><br><span class="line"><span class="meta">@dec1  </span></span><br><span class="line"><span class="meta">@dec2  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test test&quot;</span>)  </span><br><span class="line">  </span><br><span class="line">test()  </span><br><span class="line"><span class="comment"># aaaa  </span></span><br><span class="line"><span class="comment"># 1111  </span></span><br><span class="line"><span class="comment"># 2222  </span></span><br><span class="line"><span class="comment"># bbbb  </span></span><br><span class="line"><span class="comment"># test test  </span></span><br><span class="line"><span class="comment"># cccc  </span></span><br><span class="line"><span class="comment"># 3333</span></span><br><span class="line"><span class="comment"># 不调用test() 也有输出  aaaa 1111</span></span><br></pre></td></tr></table></figure><p><strong>加断点测试更清楚</strong></p><h2 id="多个装饰函数的调用顺序"><a href="#多个装饰函数的调用顺序" class="headerlink" title="多个装饰函数的调用顺序"></a>多个装饰函数的调用顺序</h2><p>函数定义阶段：执行顺序是从最靠近函数的装饰器开始，自内而外的执行</p><p>函数执行阶段：执行顺序由外而内，一层层执行</p><p>@b</p><p>@a</p><p>定义时，相当于套盒子，先套a盒子，再套b盒子</p><p>使用时，先拆b盒子（b产生了新函数），再拆a盒子（a也产生新盒子）</p><h2 id="格式化字符串f-string"><a href="#格式化字符串f-string" class="headerlink" title="格式化字符串f-string"></a>格式化字符串f-string</h2><p>f-string在形式上是以 <code>f</code> 或 <code>F</code> 修饰符引领的字符串（<code>f&#39;xxx&#39;</code> 或 <code>F&#39;xxx&#39;</code>），以大括号 <code>&#123;&#125;</code> 标明被替换的字段，可以是<strong>变量、表达式、函数调用</strong>。</p><p><strong>注意</strong>：</p><p>—.{}括号里的引号不能与外面的定界符引号发生冲突，可以使用双引号、三引号避免。</p><p>—.括号内不能出现转义字符\，即使要出现，也要用变量代替。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录python不熟悉的语法&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="https://yilp.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>pycharm报错、警告</title>
    <link href="https://yilp.github.io/2022/08/11/pycharm%E6%8A%A5%E9%94%99%E3%80%81%E8%AD%A6%E5%91%8A/"/>
    <id>https://yilp.github.io/2022/08/11/pycharm%E6%8A%A5%E9%94%99%E3%80%81%E8%AD%A6%E5%91%8A/</id>
    <published>2022-08-11T02:10:03.000Z</published>
    <updated>2022-08-12T08:12:07.293Z</updated>
    
    <content type="html"><![CDATA[<p>记录使用pycharm时出现错误和警告</p><span id="more"></span><h2 id="shadows-name-‘xxxx’-from-outer-scope-警告解决"><a href="#shadows-name-‘xxxx’-from-outer-scope-警告解决" class="headerlink" title="shadows name ‘xxxx’ from outer scope 警告解决"></a>shadows name ‘xxxx’ from outer scope 警告解决</h2><p>外部有个相同名称的变量在方法内部被重新指定了新的值，也就是说你在外部的相同名称的变量压根就没有任何作用。所以PyCharm就回提示这个信息。这个时候就需要我们去调整具体代码了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>():</span><br><span class="line">    param = <span class="string">&#x27;b&#x27;</span>  <span class="comment"># 这里就会出现这样的提示，因为在main定义的param对象被重新指定了新的值</span></span><br><span class="line">    <span class="built_in">print</span> param</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    param = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">    a()</span><br></pre></td></tr></table></figure><h2 id="RuntimeError-An-attempt-has-been-made-to-start-a-new-process-before-the-current-process-has-finished-its-bootstrapping-phase"><a href="#RuntimeError-An-attempt-has-been-made-to-start-a-new-process-before-the-current-process-has-finished-its-bootstrapping-phase" class="headerlink" title="RuntimeError: An attempt has been made to start a new process before the current process has finished its bootstrapping phase."></a>RuntimeError: An attempt has been made to start a new process before the current process has finished its bootstrapping phase.</h2><pre><code>    This probably means that you are not using fork to start your    child processes and you have forgotten to use the proper idiom    in the main module:        if __name__ == &#39;__main__&#39;:            freeze_support()            ...    The &quot;freeze_support()&quot; line can be omitted if the program    is not going to be frozen to produce an executable.</code></pre><h2 id="module-‘torch-optim’-has-no-attribute-‘sgd’"><a href="#module-‘torch-optim’-has-no-attribute-‘sgd’" class="headerlink" title="module ‘torch.optim’ has no attribute ‘sgd’"></a>module ‘torch.optim’ has no attribute ‘sgd’</h2><p>虽然代码提示有sgd属性，但实际没有，只有SGD</p><h2 id="TypeError-‘tuple’-object-does-not-support-item-assignment"><a href="#TypeError-‘tuple’-object-does-not-support-item-assignment" class="headerlink" title="TypeError: ‘tuple’ object does not support item assignment"></a>TypeError: ‘tuple’ object does not support item assignment</h2><p>Tuple：tuple是另一种有序的列表，也称为“ 元组 ”。tuple 和 list 非常类似，但是，tuple一旦创建完毕，就不能修改了。</p><ul><li>创建tuple和创建list唯一不同之处是用( )替代了[ ]。</li><li>获取 tuple 元素的方式和 list 是一模一样的，我们可以正常使用 t[0]，t[-1]等索引方式访问元素，但是不能赋值成别的元素，也不能增加删减元素。</li></ul><ul><li>tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。指向‘a’，就不能指向’b’。如果指向list，就不能改成指向其他对象，但指向的这个list本身是可变的！</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录使用pycharm时出现错误和警告&lt;/p&gt;</summary>
    
    
    
    <category term="日志" scheme="https://yilp.github.io/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="python" scheme="https://yilp.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>pytorch官方文档查询记录</title>
    <link href="https://yilp.github.io/2022/08/11/pytorch%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E6%9F%A5%E8%AF%A2%E8%AE%B0%E5%BD%95/"/>
    <id>https://yilp.github.io/2022/08/11/pytorch%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E6%9F%A5%E8%AF%A2%E8%AE%B0%E5%BD%95/</id>
    <published>2022-08-11T01:39:51.000Z</published>
    <updated>2022-08-11T08:47:33.624Z</updated>
    
    <content type="html"><![CDATA[<p>记录查询过官方文档的知识点</p><span id="more"></span><h1 id="CONV2D"><a href="#CONV2D" class="headerlink" title="CONV2D"></a>CONV2D</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.nn.Conv2d(in_channels, out_channels, kernel_size, stride=<span class="number">1</span>, padding=<span class="number">0</span>, dilation=<span class="number">1</span>, groups=<span class="number">1</span>, bias=<span class="literal">True</span>, padding_mode=<span class="string">&#x27;zeros&#x27;</span>, device=<span class="literal">None</span>, dtype=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>in_channels</strong> (<a href="https://docs.python.org/3/library/functions.html#int"><em>int</em></a>) – Number of channels in the input image</li><li><strong>out_channels</strong> (<a href="https://docs.python.org/3/library/functions.html#int"><em>int</em></a>) – Number of channels produced by the convolution</li><li><strong>kernel_size</strong> (<a href="https://docs.python.org/3/library/functions.html#int"><em>int</em></a> <em>or</em> <a href="https://docs.python.org/3/library/stdtypes.html#tuple"><em>tuple</em></a>) – Size of the convolving kernel</li><li><strong>stride</strong> (<a href="https://docs.python.org/3/library/functions.html#int"><em>int</em></a> <em>or</em> <a href="https://docs.python.org/3/library/stdtypes.html#tuple"><em>tuple</em></a><em>,</em> <em>optional</em>) – Stride of the convolution. Default: 1</li><li><strong>padding</strong> (<a href="https://docs.python.org/3/library/functions.html#int"><em>int</em></a><em>,</em> <a href="https://docs.python.org/3/library/stdtypes.html#tuple"><em>tuple</em></a> <em>or</em> <a href="https://docs.python.org/3/library/stdtypes.html#str"><em>str</em></a><em>,</em> <em>optional</em>) – Padding added to all four sides of the input. Default: 0</li><li><strong>padding_mode</strong> (<em>string</em><em>,</em> <em>optional</em>) – <code>&#39;zeros&#39;</code>, <code>&#39;reflect&#39;</code>, <code>&#39;replicate&#39;</code> or <code>&#39;circular&#39;</code>. Default: <code>&#39;zeros&#39;</code></li><li><strong>dilation</strong> (<a href="https://docs.python.org/3/library/functions.html#int"><em>int</em></a> <em>or</em> <a href="https://docs.python.org/3/library/stdtypes.html#tuple"><em>tuple</em></a><em>,</em> <em>optional</em>) – Spacing between kernel elements. Default: 1</li><li><strong>groups</strong> (<a href="https://docs.python.org/3/library/functions.html#int"><em>int</em></a><em>,</em> <em>optional</em>) – Number of blocked connections from input channels to output channels. Default: 1</li><li><strong>bias</strong> (<a href="https://docs.python.org/3/library/functions.html#bool"><em>bool</em></a><em>,</em> <em>optional</em>) – If <code>True</code>, adds a learnable bias to the output. Default: <code>True</code></li></ul><p>注意：<code>padding=&#39;valid&#39;</code> is the same as no padding. <code>padding=&#39;same&#39;</code> pads the input so the output has the shape as the input. However, this mode doesn’t support any stride values other than 1.</p><p>torch默认数据类型float32</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录查询过官方文档的知识点&lt;/p&gt;</summary>
    
    
    
    <category term="深度学习" scheme="https://yilp.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="python" scheme="https://yilp.github.io/tags/python/"/>
    
    <category term="pytorch" scheme="https://yilp.github.io/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>一间低夹定式</title>
    <link href="https://yilp.github.io/2022/08/10/%E4%B8%80%E9%97%B4%E4%BD%8E%E5%A4%B9%E5%AE%9A%E5%BC%8F/"/>
    <id>https://yilp.github.io/2022/08/10/%E4%B8%80%E9%97%B4%E4%BD%8E%E5%A4%B9%E5%AE%9A%E5%BC%8F/</id>
    <published>2022-08-10T11:16:19.000Z</published>
    <updated>2022-08-13T12:11:33.224Z</updated>
    
    <content type="html"><![CDATA[<h1 id="星位的一间低夹定式及双方变化"><a href="#星位的一间低夹定式及双方变化" class="headerlink" title="星位的一间低夹定式及双方变化"></a><strong>星位的一间低夹定式及双方变化</strong></h1><span id="more"></span><p>黑棋夹后，白棋有 <strong>点、跳、飞</strong> 三种应对方式</p><h2 id="一、白棋飞"><a href="#一、白棋飞" class="headerlink" title="一、白棋飞"></a>一、白棋飞</h2><p><img src="https://typora1111.oss-cn-chengdu.aliyuncs.com/%E4%B8%80%E9%97%B4%E4%BD%8E%E5%A4%B9-%E9%A3%9E-.png" alt="一间低夹-白飞-"></p><p>到这样，白棋又有点三三、 托两种下法</p><h3 id="—点"><a href="#—点" class="headerlink" title="—点"></a>—点</h3><p><strong>1</strong>.黑棋扳三三，黑棋出错打吃而没有挡住</p><p><img src="https://typora1111.oss-cn-chengdu.aliyuncs.com/%E9%BB%91%E6%A3%8B13%E5%87%BA%E9%94%99.png" alt="白棋点之黑棋出错"></p><p><img src="https://typora1111.oss-cn-chengdu.aliyuncs.com/%E6%AD%A3%E7%A1%AE%E4%B8%8B%E6%B3%95.png" alt="QQ截图20220810190138"></p><p><strong>2</strong>.黑棋打吃，布局结束，黑棋获得先手</p><p><img src="https://typora1111.oss-cn-chengdu.aliyuncs.com/%E9%BB%919%E6%89%93%E5%90%83.png" alt="白棋点之黑棋打吃黑棋获得先手"></p><h2 id="—托"><a href="#—托" class="headerlink" title="—托"></a>—托</h2><p><strong>1</strong>.黑棋扳</p><p>白棋出错</p><p><img src="https://typora1111.oss-cn-chengdu.aliyuncs.com/%E7%99%BD14%E5%BA%94%E5%BD%93%E5%86%B2%E9%BB%9115.png" alt="白棋托出错"></p><p><img src="https://typora1111.oss-cn-chengdu.aliyuncs.com/%E9%BB%91%E6%A3%8B%E6%89%B3%E6%AD%A3%E7%A1%AE%E4%B8%8B%E6%B3%95.png" alt="白棋托之黑棋扳"></p><p>**2.**黑棋打吃</p><p>黑棋扳不满意</p><p><img src="https://typora1111.oss-cn-chengdu.aliyuncs.com/%E9%BB%91%E6%A3%8B%E6%89%93%E5%90%83.png" alt="白棋托之黑棋打吃"></p><h2 id="二、白棋跳"><a href="#二、白棋跳" class="headerlink" title="二、白棋跳"></a>二、白棋跳</h2><p>黑棋有尖三三和尖顶白2的下法</p><p><img src="https://typora1111.oss-cn-chengdu.aliyuncs.com/%E9%BB%91%E6%A3%8B%E5%B0%96%E4%B8%89%E4%B8%89.png" alt="黑棋尖三三"></p><p>但当黑棋下方有棋可以围空的时候，就不应该尖三三，否则后面下法很吃亏</p><p><img src="https://typora1111.oss-cn-chengdu.aliyuncs.com/%E9%BB%91%E6%A3%8B%E4%B8%8B%E6%96%B9%E6%9C%89%E6%A3%8B%E7%9A%84%E6%83%85%E5%86%B5.png" alt="黑棋下方有棋"></p><h2 id="二间低夹时"><a href="#二间低夹时" class="headerlink" title="二间低夹时"></a>二间低夹时</h2><p><strong>2.二间扳粘跳出去</strong></p><p><img src="https://typora1111.oss-cn-chengdu.aliyuncs.com/%E6%98%9F%E4%BD%8D%E4%BD%8E%E5%A4%B9%E7%9A%84%E7%BB%8F%E5%85%B8%E5%AE%9A%E5%BC%8F.png" alt="二间扳粘跳出去"></p><p><strong>2.双飞燕</strong></p><p>白8应当点三三，而不是长2（黑1挡）</p><p><img src="https://typora1111.oss-cn-chengdu.aliyuncs.com/%E5%8F%8C%E9%A3%9E%E7%87%95.png" alt="双飞燕"></p><p>黑9挡白8（白10位置），则黑棋吃亏，白棋满意</p><p><strong>黑棋可能的两种下法两种</strong></p><p><img src="https://typora1111.oss-cn-chengdu.aliyuncs.com/%E9%BB%91%E6%A3%8B%E6%96%AD.png" alt="黑棋断"></p><p><img src="https://typora1111.oss-cn-chengdu.aliyuncs.com/%E9%BB%91%E6%A3%8B%E5%86%B2.png" alt="黑棋冲"></p><h2 id="二间低高夹时"><a href="#二间低高夹时" class="headerlink" title="二间低高夹时"></a>二间低高夹时</h2><p>点角</p><p>双飞燕</p><p>跳出来 </p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;星位的一间低夹定式及双方变化&quot;&gt;&lt;a href=&quot;#星位的一间低夹定式及双方变化&quot; class=&quot;headerlink&quot; title=&quot;星位的一间低夹定式及双方变化&quot;&gt;&lt;/a&gt;&lt;strong&gt;星位的一间低夹定式及双方变化&lt;/strong&gt;&lt;/h1&gt;</summary>
    
    
    
    <category term="围棋" scheme="https://yilp.github.io/categories/%E5%9B%B4%E6%A3%8B/"/>
    
    
    <category term="生活" scheme="https://yilp.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="围棋" scheme="https://yilp.github.io/tags/%E5%9B%B4%E6%A3%8B/"/>
    
  </entry>
  
  <entry>
    <title>围棋-邱百瑞</title>
    <link href="https://yilp.github.io/2022/08/07/%E5%9B%B4%E6%A3%8B-%E9%82%B1%E7%99%BE%E7%91%9E/"/>
    <id>https://yilp.github.io/2022/08/07/%E5%9B%B4%E6%A3%8B-%E9%82%B1%E7%99%BE%E7%91%9E/</id>
    <published>2022-08-07T12:54:40.000Z</published>
    <updated>2022-08-11T08:51:01.941Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-基本落子规则和胜利条件"><a href="#1-基本落子规则和胜利条件" class="headerlink" title="1.基本落子规则和胜利条件"></a>1.基本落子规则和胜利条件</h1><p>黑线白后（黑先对局结束后要还白棋），4星位，中天元</p><span id="more"></span><p><strong>打吃</strong>：2口气变1口气</p><p><strong>死棋</strong>：无气</p><p><strong>获胜条件</strong>：谁占的交叉点多胜利，地盘大（活棋和包围的地盘），占领地盘的棋子首先得活着</p><p><strong>眼</strong>:一整块的棋包围的交叉点，下不进去（包围交叉点多就叫“空”，需要学习是否在空、大眼里分割眼，双方就有先手活、后手死等）</p><p><strong>眼的叫法根据形状</strong>：直三、四，弯三，闪电四，判断、找到同时占领做活的点</p><p><strong>大眼</strong>：2个做眼（做出两眼）的位置，活//1个做眼的位置，先手活，后手死。0个做眼的位置，死</p><p><strong>假眼</strong>：看着像眼</p><p><strong>活棋</strong>：永远不会被吃</p><p><strong>线</strong>：同一线的棋子属性差不多。最外一圈叫一线。三线和四线的位置是好位置，优先占领。</p><p><strong>优先占角</strong>：围空花费的棋子、做眼的角度：角上&lt;边上&lt;中央——金角银边草肚皮（棋盘上没棋子时的价值判断）。所以<strong>优先下的位置</strong>为<strong>星位</strong>，星位下的位置叫<strong>小目</strong>，斜对角叫<strong>三三</strong>   。双方占完角后，朝中央发展</p><h1 id="2-行棋步伐"><a href="#2-行棋步伐" class="headerlink" title="2.行棋步伐"></a>2.行棋步伐</h1><p><strong>封锁线</strong>：棋子和棋子和边间隔2个距离就形成了封锁线，就封锁了地盘</p><p><strong>步伐</strong>：尖（2个棋子斜着，结实）、飞（2个棋子马，快），大飞，超大飞，拆一（横着间隔），跳（竖着从一条线到另一条线），立（2个挨着）</p><p>打劫：被吃了不能立马吃回来，必须在外下一手</p><h1 id="3-棋子间的联系"><a href="#3-棋子间的联系" class="headerlink" title="3.棋子间的联系"></a>3.棋子间的联系</h1><p>1个棋子基本能影响4个气和4个斜角（下棋先做到不吃亏），<strong>一般情况</strong>下行棋有分寸，对方一个棋子，我们下棋距离1个距离</p><p>和自己的棋子，1个棋子2个距离，2个棋子3个距离。</p><p>对方下棋碰上来，<strong>逢碰必板</strong>（改变对方行进方向）</p><p><strong>逢板必退</strong>：给自己的棋子长气</p><p><strong>扭十字长一边，哪边弱长哪边</strong>：出现扭十字后，不要着急进攻。</p><p>打吃容易出事情：就是打吃没吃掉，别人气长了，而自己的棋子是分开的，</p><p>学这些是明白下棋得有<strong>分寸感</strong>，和自己、对方的棋子保持距离</p><h1 id="4-接触战-连接和分断"><a href="#4-接触战-连接和分断" class="headerlink" title="4.接触战-连接和分断"></a>4.接触战-连接和分断</h1><p><strong>连接</strong></p><p>1.粘，直接下断点将棋子连接</p><p>2.斜（尖）：利用围棋规则，有两个断点，对方破坏1个，我们连上另1个</p><p>3.虎，下个虎口，虽然棋子没连接，但对方没法下断点</p><p> 双虎：</p><p><strong>4.虎补</strong>，通过飞来控制断点</p><p>5.双</p><h1 id="5-判断棋子重要程度"><a href="#5-判断棋子重要程度" class="headerlink" title="5.判断棋子重要程度"></a>5.判断棋子重要程度</h1><p><strong>棋筋</strong>：起到连接和分段的棋子–优先消灭/保护</p><p><strong>废子</strong>：对做活没有用，不必理会</p><p><strong>干子</strong>：普通的子</p><p>不要根据数量来判断</p><p><strong>判断在先，手段在后</strong></p><h1 id="6-吃子技巧–双打吃"><a href="#6-吃子技巧–双打吃" class="headerlink" title="6.吃子技巧–双打吃"></a>6.吃子技巧–双打吃</h1><p><strong>双打吃</strong>：一步棋打吃2个棋子（形成的条件：有断点，气紧-少，所以要自己制造、避免 ）</p><p><strong>适用范围</strong>：吃棋筋子、大块子</p><p>吃子的时候要分析值不值得吃</p><p><strong>向下吃</strong>：一般针对2、3线的棋子，利用围棋的边界</p><p><strong>关门吃</strong>：</p><p><strong>抱吃</strong>：</p><p><strong>吃子时追赶敌人把敌人朝着我们强的地方赶</strong></p><h1 id="围棋入门"><a href="#围棋入门" class="headerlink" title="围棋入门"></a><strong>围棋入门</strong></h1><h2 id="4围地的常识"><a href="#4围地的常识" class="headerlink" title="-4围地的常识"></a>-4围地的常识</h2><p>占角拆边围中间</p><p>拆二围地比较保险，围三/四线，一般围地的手法是拆二、小飞、大飞（顺序不一）</p><p>尖或者小飞守角</p><h2 id="5对杀的常识"><a href="#5对杀的常识" class="headerlink" title="-5对杀的常识"></a>-5对杀的常识</h2><p><strong>对杀</strong>：互相包围了，只有杀了对方才能活，关键比气</p><p>对杀的时候先紧外气（对方的气），不要走到公气，否则等于没走，气多也可能输（眼的那气不算外气）。公气越多，越可能双活。</p><p>有眼的和没眼的对杀，几乎不可能双活。有眼的不要走公气，无眼的一定要走完公气后才有可能杀掉对。</p><p>对杀时先做眼，阻止对方做眼，做出眼后留出了公气，占优势（公气越多优势越大）。</p><h2 id="6大小与先后手"><a href="#6大小与先后手" class="headerlink" title="-6大小与先后手"></a>-6大小与先后手</h2><p>每一手下了都会有价值，下了一子吃了1目，多了1个空格，则价值为2目</p><p><strong>单官</strong>：下了没有价值</p><p>下完了之后把吃了的子放回各自的领地里</p><p>先手：下先迫使对方抵挡，先手非常重要</p><h2 id="7关于吃子的几个问题"><a href="#7关于吃子的几个问题" class="headerlink" title="-7关于吃子的几个问题"></a>-7关于吃子的几个问题</h2><p>-能杀对方：</p><p>兵多</p><p>对方断点多</p><p>在边上，出路少</p><p>同时杀棋时把对方往边上赶，往自己人多地方赶，同时追杀棋时如果出现断点一定要注意，不要盲目杀棋</p><h1 id="布局的要领"><a href="#布局的要领" class="headerlink" title="布局的要领"></a>布局的要领</h1><h2 id="1占角、挂角、根据地"><a href="#1占角、挂角、根据地" class="headerlink" title="-1占角、挂角、根据地"></a>-1占角、挂角、根据地</h2><p>挂角：小飞挂（最常用）、一间高挂、二间高挂</p><p>不同位置的挂角：</p><p>守角：对星位的守角，小飞、大飞、边角</p><p>布局的重要手段：拆（下对方拆的地方，叫架）。两个子就可拆三</p><h2 id="2分投、大场"><a href="#2分投、大场" class="headerlink" title="-2分投、大场"></a>-2分投、大场</h2><p>分投：投在对方的阵地，两边都可拆（二）</p><p>大场：中间1那个点</p><h2 id="3有关根据-4有关出路"><a href="#3有关根据-4有关出路" class="headerlink" title="-3有关根据 4有关出路"></a>-3有关根据 4有关出路</h2><p>快被包围的时候可以跳逃出去</p><p>下棋寻找没有安定的棋</p><p><strong>占地比吃子更重要</strong></p><p>活棋要尽量能照顾其他地方</p><p><strong>布局的时候下棋看下的棋和根据地、出路有无关系</strong></p><h2 id="5布局常见错误-拆二、根据和官子"><a href="#5布局常见错误-拆二、根据和官子" class="headerlink" title="-5布局常见错误-拆二、根据和官子"></a><strong>-5布局常见错误-拆二、根据和官子</strong></h2><p> 双方已经碰撞了，要注意</p><p>围棋眼界要宽阔，要大胆，也不要小小缩边围地</p><h2 id="6布局常见错误-一味围地、劳力重复"><a href="#6布局常见错误-一味围地、劳力重复" class="headerlink" title="-6布局常见错误-一味围地、劳力重复"></a><strong>-6布局常见错误-一味围地、劳力重复</strong></h2><p>已经活了的棋不需要照顾，</p><p>活棋会师也没有效率 </p><h2 id="7布局-三连星"><a href="#7布局-三连星" class="headerlink" title="-7布局-三连星"></a><strong>-7布局-三连星</strong></h2><p>小目控角、目外占边、高目中间，星位三者兼顾</p><p>初中级常用的布局，非常实用</p><p>比如对手在内部小飞挂，尖顶定式，大场继续尖顶进攻挖根</p><p>对手小飞挂，我方使用夹攻击，对手点三三，防御得把对手挡在三连星外</p><h2 id="8布局-中国流"><a href="#8布局-中国流" class="headerlink" title="-8布局-中国流"></a><strong>-8布局-中国流</strong></h2><p>初期，日本很强，中国在定式这些理论方面很弱，但中盘厮杀能力可以，于是开发出了中国流，针对日本棋手，追求快速布局，进入战斗。</p><hr><h1 id="定式的要点"><a href="#定式的要点" class="headerlink" title="定式的要点"></a>定式的要点</h1><h2 id="1得失的判断"><a href="#1得失的判断" class="headerlink" title="-1得失的判断"></a>-1得失的判断</h2><p><strong>开局情况（双方可以接受）</strong></p><p>1、双方一半一半</p><p>2、一个实地，一个外势。水平一般要实地实惠，但最好要外势锻炼（股票和现金）</p><p>3、直接对杀</p><h2 id="2着手的意义、连络与切断、出头与封头、根据地"><a href="#2着手的意义、连络与切断、出头与封头、根据地" class="headerlink" title="-2着手的意义、连络与切断、出头与封头、根据地"></a>-2着手的意义、连络与切断、出头与封头、根据地</h2><p>定式就是包含了 连络与切断、出头与封头、根据地，<strong>每手棋基本就这几个作用。</strong></p><p><strong>下棋只要符合基本原则就不会出太大的错</strong></p><p><strong>出头封头很重要</strong></p><h2 id="3星、小飞挂"><a href="#3星、小飞挂" class="headerlink" title="-3星、小飞挂"></a>-3星、小飞挂</h2><p>小飞挂是最常见的</p><p><strong>像尖顶定式一般是有棋子防止对面拆二才用</strong></p><p><strong>别人打自己弱点，自己也要注意对面弱点，打过去</strong></p><p><strong>老老实实下棋没法提升</strong></p><p><strong>送对面一子来布局，不得贪吃</strong></p><p><strong>定式知道这种下法就行，具体看变化</strong></p><p><strong>一打一接</strong></p><h2 id="4小目"><a href="#4小目" class="headerlink" title="-4小目"></a>-4小目</h2><p>小飞挂</p><p>应对：1.尖守（很稳定） 、小飞、拆二</p><p>​            2 夹 （现在常用的，对手跳）</p><h2 id="5高挂"><a href="#5高挂" class="headerlink" title="-5高挂"></a>-5高挂</h2><h2 id="6目外、高目、三三"><a href="#6目外、高目、三三" class="headerlink" title="-6目外、高目、三三"></a>-6目外、高目、三三</h2><hr><h1 id="死活的关键"><a href="#死活的关键" class="headerlink" title="死活的关键"></a>死活的关键</h1><h2 id="1基本手段-扩大与缩小眼位"><a href="#1基本手段-扩大与缩小眼位" class="headerlink" title="-1基本手段-扩大与缩小眼位"></a>-1基本手段-扩大与缩小眼位</h2><p>2路六死八活、3路四死六活</p><p>二一路很重要</p><p>缩小眼位要注意力度够不够</p><p>缩小眼位：1. 一路板（如 扑）  2.内部</p><p>哪扩大，哪缩小，变成基本型</p><h2 id="2基本手段-做眼和点眼"><a href="#2基本手段-做眼和点眼" class="headerlink" title="-2基本手段-做眼和点眼"></a>-2基本手段-做眼和点眼</h2><p>做眼:用最小的地方做个眼</p><p>点眼：让对方浪费地方才能做眼，阻止对方做眼</p><p>缩眼不行就考虑点眼 </p><p>扩大眼位不行就做眼</p><h2 id="3基本手段-眼形要点"><a href="#3基本手段-眼形要点" class="headerlink" title="-3基本手段-眼形要点"></a>-3基本手段-眼形要点</h2><p>直的眼位和弯的眼位容易活，特别是弯的</p><p>方的和圆的容易死</p><h2 id="4基本手段-二一路"><a href="#4基本手段-二一路" class="headerlink" title="-4基本手段-二一路"></a>-4基本手段-二一路</h2><p>考虑死活的方案时，还要考虑对方的破坏</p><p><strong>要多注意二一路</strong>    角上死活很重要的要点</p><h2 id="5基本手段-点方"><a href="#5基本手段-点方" class="headerlink" title="-5基本手段-点方"></a>-5基本手段-点方</h2><p>死活时 田的对角</p><p><img src="https://typora1111.oss-cn-chengdu.aliyuncs.com/QQ%E6%88%AA%E5%9B%BE20220727133014.png" alt="QQ截图20220727133014"></p><p><img src="https://typora1111.oss-cn-chengdu.aliyuncs.com/QQ%E6%88%AA%E5%9B%BE20220727132554.png" alt="QQ截图20220727132554"></p><h2 id="6基本手段-扑与防扑"><a href="#6基本手段-扑与防扑" class="headerlink" title="-6基本手段-扑与防扑"></a>-6基本手段-扑与防扑</h2><p>扑来破眼，比如点眼扑再扑</p><p>防扑：想办法吃3子，或者先手吃2子</p><p><img src="https://typora1111.oss-cn-chengdu.aliyuncs.com/QQ%E6%88%AA%E5%9B%BE20220727133318.png" alt="QQ截图20220727133318"></p><p><img src="https://typora1111.oss-cn-chengdu.aliyuncs.com/QQ%E6%88%AA%E5%9B%BE20220727133503.png" alt="QQ截图20220727133503"></p><p><img src="https://typora1111.oss-cn-chengdu.aliyuncs.com/QQ%E6%88%AA%E5%9B%BE20220727134026.png" alt="QQ截图20220727134026"></p><p><img src="https://typora1111.oss-cn-chengdu.aliyuncs.com/QQ%E6%88%AA%E5%9B%BE20220727135431.png" alt="QQ截图20220727135431"></p><p><img src="https://typora1111.oss-cn-chengdu.aliyuncs.com/QQ%E6%88%AA%E5%9B%BE20220727135538.png" alt="QQ截图20220727135538"></p><p><img src="https://typora1111.oss-cn-chengdu.aliyuncs.com/QQ%E6%88%AA%E5%9B%BE20220727135901.png" alt="QQ截图20220727135901"></p><h2 id="7基本形-角部基本型"><a href="#7基本形-角部基本型" class="headerlink" title="-7基本形-角部基本型"></a>-7基本形-角部基本型</h2><p><strong>直三·曲三一点死，丁四·刀五一点亡。花五·花六眼虽大，中间一点也白忙。</strong></p><p><strong>直四·曲四和板六，够做两眼不用慌。</strong></p><p>死棋</p><p><img src="https://typora1111.oss-cn-chengdu.aliyuncs.com/QQ%E6%88%AA%E5%9B%BE20220727140336.png" alt="QQ截图20220727140336"></p><p>多一路（黑棋先板则变死棋形状，所以白棋先得占个二一路就活了）</p><p><img src="https://typora1111.oss-cn-chengdu.aliyuncs.com/QQ%E6%88%AA%E5%9B%BE20220727141221.png" alt="QQ截图20220727141221"></p><p>活棋</p><p><img src="https://typora1111.oss-cn-chengdu.aliyuncs.com/QQ%E6%88%AA%E5%9B%BE20220727141455.png" alt="QQ截图20220727141455"></p><p>活棋</p><p><img src="https://typora1111.oss-cn-chengdu.aliyuncs.com/QQ%E6%88%AA%E5%9B%BE20220727140712.png" alt="QQ截图20220727140712"></p><p>白棋多了个板</p><p><img src="https://typora1111.oss-cn-chengdu.aliyuncs.com/QQ%E6%88%AA%E5%9B%BE20220727141704.png" alt="QQ截图20220727141704"></p><p>黑棋下面先板则白死了，如果黑棋扑则错了，或者黑点方</p><p>白棋点二一路</p><p>下面有个板</p><p><img src="https://typora1111.oss-cn-chengdu.aliyuncs.com/QQ%E6%88%AA%E5%9B%BE20220727142022.png" alt="QQ截图20220727142022"></p><h2 id="8基本形-小猪嘴型"><a href="#8基本形-小猪嘴型" class="headerlink" title="-8基本形-小猪嘴型"></a>-8基本形-小猪嘴型</h2><h2 id="9基本形-大猪嘴型"><a href="#9基本形-大猪嘴型" class="headerlink" title="-9基本形-大猪嘴型"></a>-9基本形-大猪嘴型</h2><h2 id="10基本形-金柜角型"><a href="#10基本形-金柜角型" class="headerlink" title="-10基本形-金柜角型"></a>-10基本形-金柜角型</h2><h2 id="11基本形-实战常见型"><a href="#11基本形-实战常见型" class="headerlink" title="-11基本形-实战常见型"></a>-11基本形-实战常见型</h2><h2 id="12基本形-边上基本型"><a href="#12基本形-边上基本型" class="headerlink" title="-12基本形-边上基本型"></a>-12基本形-边上基本型</h2><p>中间有气，两边至少有一个有气</p><p><strong>盘角曲四</strong></p><p><img src="https://typora1111.oss-cn-chengdu.aliyuncs.com/QQ%E6%88%AA%E5%9B%BE20220727152248.png" alt="QQ截图20220727152248"></p><p><strong>盘角曲四</strong>，劫尽棋亡。<br>等到全部单官收完以后，点进去， 对方只好扑劫， 提劫， 此时全场无劫财， 所以是死棋。</p><p>所以，盘角曲四得把全局劫材补完后再下，有双活就不一样了。</p><p>盘角的曲四五应该都有死的</p><p><strong>打劫</strong>：谁下谁吃</p><p><strong>劫材</strong>：打劫后，由于不能立即提回，需在其他地方下一手，如果迫使对方应一手，则可以称这一手为劫材</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1-基本落子规则和胜利条件&quot;&gt;&lt;a href=&quot;#1-基本落子规则和胜利条件&quot; class=&quot;headerlink&quot; title=&quot;1.基本落子规则和胜利条件&quot;&gt;&lt;/a&gt;1.基本落子规则和胜利条件&lt;/h1&gt;&lt;p&gt;黑线白后（黑先对局结束后要还白棋），4星位，中天元&lt;/p&gt;</summary>
    
    
    
    <category term="围棋" scheme="https://yilp.github.io/categories/%E5%9B%B4%E6%A3%8B/"/>
    
    
    <category term="生活" scheme="https://yilp.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="围棋" scheme="https://yilp.github.io/tags/%E5%9B%B4%E6%A3%8B/"/>
    
  </entry>
  
  <entry>
    <title>基于hexo的博客搭建</title>
    <link href="https://yilp.github.io/2022/08/07/%E5%9F%BA%E4%BA%8Ehexo%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>https://yilp.github.io/2022/08/07/%E5%9F%BA%E4%BA%8Ehexo%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</id>
    <published>2022-08-07T12:10:27.000Z</published>
    <updated>2022-08-08T06:19:46.717Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装Nodejs"><a href="#1-安装Nodejs" class="headerlink" title="1.安装Nodejs"></a>1.安装Nodejs</h2><p>官网安装好Nodejs，除了安装路径，一路next安装</p><span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git bash #进入根目录</span><br><span class="line">node -v#查看node版本</span><br><span class="line">node -v#查看node版本</span><br></pre></td></tr></table></figure><h2 id="2-安装hexo框架"><a href="#2-安装hexo框架" class="headerlink" title="2.安装hexo框架"></a>2.安装hexo框架</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=http://registry.npm.taobao.org #安装淘宝的cnpm 管理器</span><br><span class="line">cnpm -v#查看cnpm版本</span><br><span class="line">cnpm install -g hexo-cli #安装hexo框架</span><br><span class="line">hexo -v#查看hexo版本</span><br></pre></td></tr></table></figure><h2 id="3-配置个人博客"><a href="#3-配置个人博客" class="headerlink" title="3.配置个人博客"></a>3.配置个人博客</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir blog#创建blog目录 本文件夹包含博客的所有东西，配置出错删除重来即可</span><br><span class="line">cd blog #进入blog目录</span><br><span class="line">hexo init #生成博客 初始化博客</span><br><span class="line">hexo s#启动本地博客服务 访问 http://localhost:4000/ 即可看到本地博客</span><br><span class="line">hexo n &quot;我的第一篇文章&quot; #创建新的文章 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">返回blog目录</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">写、改文章后的必要操作</span></span><br><span class="line">hexo clean #清理</span><br><span class="line">hexo g #生成</span><br></pre></td></tr></table></figure><h2 id="4-利用GitHub部署到远端"><a href="#4-利用GitHub部署到远端" class="headerlink" title="4.利用GitHub部署到远端"></a>4.利用GitHub部署到远端</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个新仓库，命名为 GitHub的用户名.github.io</span></span><br><span class="line">cnpm install --save hexo-deployer-git # 在blog目录下部署git插件</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置blog目录下的 _config.yml 文件----非常重要的文件，后续还可修改博客风格</span></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line"> repo: https://github.com/YourGithubName/YourGithubName.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">hexo d#部署到Github仓库里 https://Name.github.io/ 可以查看博客</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">每次写好文章后，现在本地服务器查看有无错误，再上传</span></span><br></pre></td></tr></table></figure><h2 id="5-修改主题"><a href="#5-修改主题" class="headerlink" title="5.修改主题"></a>5.修改主题</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia  #下载yilia主题到本地</span><br><span class="line"><span class="meta prompt_"> #</span><span class="language-bash">修改blog目录下的 _config.yml 文件 ： theme: yilia</span></span><br><span class="line"> hexo c#清理一下</span><br><span class="line">hexo g#生成</span><br><span class="line">hexo d#部署到远程Github仓库</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pwd # 显示当前路径</span><br><span class="line">cd #更改路径</span><br><span class="line"><span class="meta prompt_">mkdir#</span><span class="language-bash">创建文件夹</span></span><br><span class="line">cd ../../ #返回上两级目录</span><br><span class="line">ls -l #显示文件列表</span><br></pre></td></tr></table></figure><h2 id="博客搭好写、传文章"><a href="#博客搭好写、传文章" class="headerlink" title="博客搭好写、传文章"></a>博客搭好写、传文章</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;文章名&quot; #改不需要这一步</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在本地写好后</span></span><br><span class="line">hexo clean #最好clean 不要n</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-安装Nodejs&quot;&gt;&lt;a href=&quot;#1-安装Nodejs&quot; class=&quot;headerlink&quot; title=&quot;1.安装Nodejs&quot;&gt;&lt;/a&gt;1.安装Nodejs&lt;/h2&gt;&lt;p&gt;官网安装好Nodejs，除了安装路径，一路next安装&lt;/p&gt;</summary>
    
    
    
    <category term="博客搭建" scheme="https://yilp.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="环境搭建" scheme="https://yilp.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    <category term="博客" scheme="https://yilp.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hexo命令</title>
    <link href="https://yilp.github.io/2022/08/07/hello-world/"/>
    <id>https://yilp.github.io/2022/08/07/hello-world/</id>
    <published>2022-08-07T07:28:22.556Z</published>
    <updated>2022-08-08T07:00:46.027Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;</summary>
    
    
    
    <category term="博客搭建" scheme="https://yilp.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="环境搭建" scheme="https://yilp.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    <category term="博客" scheme="https://yilp.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
